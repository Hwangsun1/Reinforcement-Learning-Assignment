import gym
import collections
import random
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F

# 하이퍼파라메터값 설정
learning_rate = 0.0005
gamma = 0.98
buffer_limit = 50000
batch_size = 32

class ReplayBuffer():
    def __init__(self):
        self.buffer = collections.deque(maxlen=buffer_limit)

    def put(self, transition):
        self.buffer.append(transition)

    def sample(self, n):
        mini_batch = random.sample(self.buffer, n)
        s_lst, a_lst, r_lst, s_prime_lst, done_mask_lst = [], [], [], [], []

        for transition in mini_batch:
            s, a, r, s_prime, done_mask = transition
            s_lst.append(s)
            a_lst.append([a])
            r_lst.append([r])
            s_prime_lst.append(s_prime)
            done_mask_lst.append([done_mask])

        return torch.tensor(s_lst, dtype=torch.float), torch.tensor(a_lst), \
               torch.tensor(r_lst, dtype=torch.float), torch.tensor(s_prime_lst, dtype=torch.float), \
               torch.tensor(done_mask_lst, dtype=torch.float)

    def size(self):
        return len(self.buffer)

class Qnet(nn.Module):
    def __init__(self):
        super(Qnet, self).__init__()
        self.fc1 = nn.Linear(6, 128)
        self.fc2 = nn.Linear(128, 128)
#        self.fc3 = nn.Linear(128, 128) # 성능 향상을 위하 신경망 하나를 추가해 봄
        self.fc4 = nn.Linear(128, 3)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
 #       x = F.relu(self.fc3(x))
        x = self.fc4(x)
        return x

    def sample_action(self, obs, epsilon):
        out = self.forward(obs)
        coin = random.random()
        if coin < epsilon:
            return random.randint(0, 2)
        else :
            return out.argmax().item()

def train(q, q_target, memory, optimizer):
    for i in range(10):
        s, a, r, s_prime, done_mask = memory.sample(batch_size) # 메모리에 저장된 5차원의 벡터를 32개(배치사이즈) 갖고옴

        q_out = q(s) #모델에 넣음 32  x 2
        q_a = q_out.gather(1, a.long())


        argmax_Q = q(s_prime).max(1)[1].unsqueeze(1) # Double DQN(DQN에서 아래 한 줄만 추가하면 됨)
        max_q_prime = q_target(s_prime).gather(1, argmax_Q) #DQN Loss Function 계산

        target = r + gamma * max_q_prime * done_mask

        # MSE Loss
        loss = F.mse_loss(q_a, target)

        # Loss 값을 이용해서 Parameter 업데이트 해 주는 구간
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

def main():
    env = gym.make('Acrobot-v1') #render_mode='human' > 이해를 돕기 위해 이미지 위해서 사용
    q = Qnet()
    q_target = Qnet()
    q_target.load_state_dict(q.state_dict()) # 파라메타까지 같은 DQN을 생성
    memory = ReplayBuffer()

    score = 0.0
    optimizer = optim.Adam(q.parameters(), lr=learning_rate)

    for n_epi in range(3000): # DQN을 사용해서 에피스도를 돌리면서 모델을 업데이트 함
        epsilon = max(0.01, 0.08 - 0.01 * (n_epi / 200))  # epsilon-greedy policy 사용, 에피소드가 증가할 수록 줄어듬
        s, _ = env.reset()
        done = False

        while not done:
            a = q.sample_action(torch.from_numpy(np.array(s)).float(), epsilon) # torch의 텐서 형태로 맞춰 줌
            s_prime, r, terminated, truncated, info = env.step(a)
            done = (terminated or truncated)
            done_mask = 0.0 if done else 1.0
            memory.put((s, a, r, s_prime, done_mask)) # 메모리에 넣어 줌, score값이 너무 커질 경우 /100.0 사용
            s = s_prime

            score += r
            if done: break

        #에피소드 종료, 뉴럴네트워크 업데이트 구간
        if memory.size() > 2000: # 초기 2000 전에는 데이터가 적어 트레이닝을 하지 않음
            train(q, q_target, memory, optimizer)

        if n_epi % 20 == 0 and n_epi != 0:
            q_target.load_state_dict(q.state_dict())
            print("n_epi :{}, score : {:.1f}, n_buffer : {}, eps : {:.1f}%".format(
                n_epi, score / 20, memory.size(), epsilon * 100))
            score = 0.0

    env.close()

if __name__ == '__main__':
    main()
